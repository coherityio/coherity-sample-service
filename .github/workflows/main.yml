name: Build and Publish Coherity Sample Service

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
        
    - name: Run tests
      run: ./mvnw -s .github/workflows/ci-settings.xml test
      env:
        MAVEN_USERNAME: ${{ github.actor }}
        MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build application
      run: ./mvnw -s .github/workflows/ci-settings.xml clean package -DskipTests
      env:
        MAVEN_USERNAME: ${{ github.actor }}
        MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-artifacts
        path: |
          target/*.jar
          target/*.zip

  publish-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-artifacts
        path: target/
        
    - name: Publish JAR to GitHub Packages
      run: ./mvnw -s .github/workflows/ci-settings.xml deploy -DskipTests
      env:
        MAVEN_USERNAME: ${{ github.actor }}
        MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-artifacts
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/coherityio/coherity-sample-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ARTIFACT_ID=coherity-sample-service
          VERSION=${{ github.ref_name == 'main' && '1.0.0-SNAPSHOT' || github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-packages, build-docker]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-test.result == 'success' && (needs.publish-packages.result == 'success' || needs.publish-packages.result == 'skipped') && (needs.build-docker.result == 'success' || needs.build-docker.result == 'skipped')
      run: |
        echo "✅ Coherity Sample Service build and publish completed successfully!"
        echo "Branch/Tag: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        
    - name: Notify failure
      if: needs.build-and-test.result == 'failure' || needs.publish-packages.result == 'failure' || needs.build-docker.result == 'failure'
      run: |
        echo "❌ Coherity Sample Service build or publish failed!"
        echo "Branch/Tag: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        exit 1
